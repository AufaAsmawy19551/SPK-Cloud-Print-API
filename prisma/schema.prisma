generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name              String
  email             String          @unique(map: "users_email_unique")
  email_verified_at DateTime?       @db.Timestamp(0)
  password          String
  remember_token    String?         @db.VarChar(100)
  created_at        DateTime?       @db.Timestamp(0)
  updated_at        DateTime?       @db.Timestamp(0)
  design_orders     design_orders[]
  invoices          invoices[]
  print_orders      print_orders[]
  printers          printers[]
  providers         providers[]
  shops             shops[]
}

model banks {
  id         BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  created_at DateTime?   @db.Timestamp(0)
  updated_at DateTime?   @db.Timestamp(0)
  providers  providers[]
}

model cities {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  province_id BigInt      @db.UnsignedBigInt
  city_id     Int
  name        String
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  provinces   provinces   @relation(fields: [province_id], references: [id], onUpdate: Restrict, map: "cities_province_id_foreign")
  invoices    invoices[]
  providers   providers[]

  @@index([province_id], map: "cities_province_id_foreign")
}

model design_orders {
  id               BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id          BigInt?    @db.UnsignedBigInt
  provider_id      BigInt?    @db.UnsignedBigInt
  material_id      BigInt?    @db.UnsignedBigInt
  description      String     @db.Text
  design_reference String?
  status           String     @default("pending")
  order_date       DateTime   @default(now()) @db.Timestamp(0)
  completion_date  DateTime?  @db.Timestamp(0)
  created_at       DateTime?  @db.Timestamp(0)
  updated_at       DateTime?  @db.Timestamp(0)
  materials        materials? @relation(fields: [material_id], references: [id], map: "design_orders_material_id_foreign")
  providers        providers? @relation(fields: [provider_id], references: [id], map: "design_orders_provider_id_foreign")
  users            users?     @relation(fields: [user_id], references: [id], map: "design_orders_user_id_foreign")

  @@index([material_id], map: "design_orders_material_id_foreign")
  @@index([provider_id], map: "design_orders_provider_id_foreign")
  @@index([user_id], map: "design_orders_user_id_foreign")
}

model dimensions {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name        String
  description String
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  printers    printers[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model invoices {
  id                    BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  type                  String          @default("print_order")
  invoice               String
  order_id              BigInt?         @db.UnsignedBigInt
  user_id               BigInt          @db.UnsignedBigInt
  courier               String
  courier_service       String
  courier_cost          BigInt
  weight                Int
  name                  String
  phone                 String
  city_id               BigInt          @db.UnsignedBigInt
  province_id           BigInt          @db.UnsignedBigInt
  latitude              String
  longitude             String
  address               String          @db.Text
  status                invoices_status
  payment_evidence_path String?
  bank_id               BigInt          @db.UnsignedBigInt
  grand_total           BigInt
  created_at            DateTime?       @db.Timestamp(0)
  updated_at            DateTime?       @db.Timestamp(0)
  cities                cities          @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "invoices_city_id_foreign")
  provinces             provinces       @relation(fields: [province_id], references: [id], onUpdate: Restrict, map: "invoices_province_id_foreign")
  users                 users           @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "invoices_user_id_foreign")

  @@index([city_id], map: "invoices_city_id_foreign")
  @@index([province_id], map: "invoices_province_id_foreign")
  @@index([user_id], map: "invoices_user_id_foreign")
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model materials {
  id              BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name            String
  price_per_gram  Decimal         @db.Decimal(10, 2)
  length_per_gram Decimal         @default(0.00) @db.Decimal(10, 2)
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  design_orders   design_orders[]
  print_orders    print_orders[]
  printers        printers[]
}

model media {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  disk        String    @default("public")
  directory   String    @default("media")
  visibility  String    @default("public")
  name        String
  path        String
  width       Int?      @db.UnsignedInt
  height      Int?      @db.UnsignedInt
  size        Int?      @db.UnsignedInt
  type        String    @default("image")
  ext         String
  alt         String?
  title       String?
  description String?   @db.Text
  caption     String?   @db.Text
  exif        String?   @db.Text
  curations   String?   @db.LongText
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  tenant_id   Int?
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model order_status_histories {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  orderable_id   BigInt    @db.UnsignedBigInt
  orderable_type String
  status         String
  status_date    DateTime  @default(now()) @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([orderable_id, orderable_type], map: "order_status_histories_order_id_order_type_index")
}

model pages {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title       String
  slug        String
  layout      String    @default("default")
  blocks      String    @db.LongText
  parent_id   BigInt?   @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  pages       pages?    @relation("pagesTopages", fields: [parent_id], references: [id], onDelete: Cascade, map: "pages_parent_id_foreign")
  other_pages pages[]   @relation("pagesTopages")

  @@unique([slug, parent_id], map: "pages_slug_parent_id_unique")
  @@index([layout], map: "pages_layout_index")
  @@index([parent_id], map: "pages_parent_id_foreign")
  @@index([title], map: "pages_title_index")
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime? @db.Timestamp(0)
}

model payment_methods {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  accountNumber String
  accountName   String?
  icon_path     String
  bank_id       BigInt    @db.UnsignedBigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String
  guard_name            String
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]

  @@unique([name, guard_name], map: "permissions_name_guard_name_unique")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model print_orders {
  id                 BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  user_id            BigInt?    @db.UnsignedBigInt
  provider_id        BigInt?    @db.UnsignedBigInt
  material_id        BigInt?    @db.UnsignedBigInt
  printer_id         BigInt?    @db.UnsignedBigInt
  dimension_id       BigInt?    @db.UnsignedBigInt
  quality_id         BigInt?    @db.UnsignedBigInt
  gcode_file         String?
  delivery_address   String?
  delivery_latitude  Float?
  delivery_longitude Float?
  status             String     @default("pending")
  total_price        BigInt
  completion_date    DateTime?  @db.Timestamp(0)
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  city_id            BigInt?    @db.UnsignedBigInt
  province_id        BigInt?    @db.UnsignedBigInt
  due_date           DateTime?  @db.Date
  description        String?    @db.Text
  materials          materials? @relation(fields: [material_id], references: [id], map: "print_orders_material_id_foreign")
  printers           printers?  @relation(fields: [printer_id], references: [id], map: "print_orders_printer_id_foreign")
  providers          providers? @relation(fields: [provider_id], references: [id], map: "print_orders_provider_id_foreign")
  users              users?     @relation(fields: [user_id], references: [id], map: "print_orders_user_id_foreign")

  @@index([material_id], map: "print_orders_material_id_foreign")
  @@index([printer_id], map: "print_orders_printer_id_foreign")
  @@index([provider_id], map: "print_orders_provider_id_foreign")
  @@index([user_id], map: "print_orders_user_id_foreign")
}

model printers {
  id                BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  name              String
  user_id           BigInt           @db.UnsignedBigInt
  octoprint_url     String
  octoprint_api_key String
  tunnel_username   String
  tunnel_password   String
  created_at        DateTime?        @db.Timestamp(0)
  updated_at        DateTime?        @db.Timestamp(0)
  status            printers_status?
  dimension_id      BigInt           @db.UnsignedBigInt
  material_id       BigInt           @db.UnsignedBigInt
  print_orders      print_orders[]
  dimensions        dimensions       @relation(fields: [dimension_id], references: [id], onDelete: Cascade, map: "printers_dimension_id_foreign")
  materials         materials        @relation(fields: [material_id], references: [id], onDelete: Cascade, map: "printers_material_id_foreign")
  users             users            @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "printers_user_id_foreign")

  @@index([dimension_id], map: "printers_dimension_id_foreign")
  @@index([material_id], map: "printers_material_id_foreign")
  @@index([user_id], map: "printers_user_id_foreign")
}

model providers {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  name          String
  address       String
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  user_id       BigInt          @db.UnsignedBigInt
  bank_id       BigInt          @db.UnsignedBigInt
  city_id       BigInt          @db.UnsignedBigInt
  province_id   BigInt          @db.UnsignedBigInt
  bank_account  String
  latitude      Float
  longitude     Float
  design_orders design_orders[]
  print_orders  print_orders[]
  banks         banks           @relation(fields: [bank_id], references: [id], onDelete: Cascade, map: "providers_bank_id_foreign")
  cities        cities          @relation(fields: [city_id], references: [id], onUpdate: Restrict, map: "providers_city_id_foreign")
  provinces     provinces       @relation(fields: [province_id], references: [id], onUpdate: Restrict, map: "providers_province_id_foreign")
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "providers_user_id_foreign")

  @@index([bank_id], map: "providers_bank_id_foreign")
  @@index([city_id], map: "providers_city_id_foreign")
  @@index([province_id], map: "providers_province_id_foreign")
  @@index([user_id], map: "providers_user_id_foreign")
}

model provinces {
  id          BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  province_id Int
  name        String
  created_at  DateTime?   @db.Timestamp(0)
  updated_at  DateTime?   @db.Timestamp(0)
  cities      cities[]
  invoices    invoices[]
  providers   providers[]
}

model qualities {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String
  guard_name           String
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]

  @@unique([name, guard_name], map: "roles_name_guard_name_unique")
}

model services {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  title      String
  desc       String    @db.Text
  path       String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  slug       String
}

model shops {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id      BigInt    @db.UnsignedBigInt
  name_shop    String
  desc         String    @db.Text
  web_title    String
  web_subtitle String
  web_slogan   String
  phone        BigInt
  address      String
  path         String
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  path_dark    String
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "shops_user_id_foreign")

  @@index([user_id], map: "shops_user_id_foreign")
}

enum printers_status {
  operational
  not_operational
  printing
  pausing
  cancelling
  paused
}

enum invoices_status {
  pending
  success
  expired
  failed
}
